# report beta coefficients
print(m1$coefficients)
#| label: Packages
#| message: false
#| code-fold: true
library(curl)
library(manipulate)
library(ggplot2)
library(broom)
library(lmtest)
library(tidyverse)
#| label: Data
#| code-fold: show
d <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/refs/heads/master/AN588_Spring25/KamilarAndCooperData.csv")
df <- read.csv(d, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(df)
#| label: Linear Regression
# creating new reference vars
range <- df$HomeRange_km2
f_mass <- df$Body_mass_female_mean
# create a linear model, m1, with relation y ~ x for the variables log(HomeRange_km2) and log(Body_mass_female_mean)
m1 <- lm(log(range) ~ log(f_mass), data = df)
# report beta coefficients
print(m1$coefficients)
# report beta coefficients
table(m1$coefficients)
list(SE = boot_se, CI = boot_ci)
#| label: Bootstrapping
# Set number of bootstraps, n
n <- 1000
# Store coefficients from each bootstrap
boot_coefs <- replicate(n, {
s <- df %>% sample_frac(replace = TRUE)
coef(lm(log(HomeRange_km2) ~ log(Body_mass_female_mean), data = s))
}, simplify = "matrix")
# Convert to data frame
boot_df <- as.data.frame(t(boot_coefs))
colnames(boot_df) <- c("Intercept", "Slope")
# Estimate SEs and CIs
boot_se <- apply(boot_df, 2, sd)
boot_ci <- apply(boot_df, 2, quantile, probs = c(0.025, 0.975))
list(SE = boot_se, CI = boot_ci)
#| label: Comparing SEs and CIs
#| code-fold: true
list(LM.SE =summary(m1)$coefficients[, "Std. Error"], Boot.SE = boot_se); list(LM.CI = confint(m1), Boot.CI = boot_ci)
